plugins {
    id 'org.springframework.boot' version '2.0.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

group = 'cn.ihep.jdy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
        mavenLocal()

    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter'
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.0.8.RELEASE'
    compile("org.springframework.boot:spring-boot-starter-security")

    compile "org.springframework.boot:spring-boot-starter-web"
    compile ("org.springframework.boot:spring-boot-starter-undertow")//容器tomcat之类
    compile ("org.springframework.boot:spring-boot-starter-actuator")//（健康监控）配置和使用

    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    runtime "mysql:mysql-connector-java"
    compile "org.springframework.boot:spring-boot-starter-data-redis"
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.0'

    compile "io.jsonwebtoken:jjwt:0.7.0"
    compile ("cn.jpush.api:jpush-client:3.3.4")
    compile ('com.alibaba:fastjson:1.2.8')

    compile "org.springframework.boot:spring-boot-starter-websocket"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


    compile 'javax.servlet:jstl:1.2'
    compile 'javax.servlet:javax.servlet-api:4.0.0'

    compile 'org.apache.tomcat.embed:tomcat-embed-jasper:8.5.45'

    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.9.3'
    compile 'io.springfox:springfox-swagger-ui:2.9.2'
    compile 'io.springfox:springfox-swagger2:2.9.2'
}
bootJar{
    baseName("jdy2019y10m19d")
    version("2.0.1")
}
jar {
    String someString = ''
    configurations.runtime.each {someString = someString + " lib//"+it.name}
    manifest {
        attributes 'Main-Class': 'com.xbs.AppMain'
        attributes 'Class-Path': someString
    }
}
//清除上次的编译过的文件
task clearPj(type:Delete){
    delete 'build','target'
}
task copyJar(type:Copy){
    from configurations.runtime
    into ('build/libs/lib')
}
//把JAR复制到目标目录
task release(type: Copy,dependsOn: [build,copyJar]) {
// from 'conf'
// into ('build/libs/eachend/conf') // 目标位置
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}